<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: oop | Technical Writings of a Cryptocurrency Evangelist]]></title>
  <link href="http://mattcampbell.nyc/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://mattcampbell.nyc/"/>
  <updated>2015-07-29T16:04:49-04:00</updated>
  <id>http://mattcampbell.nyc/</id>
  <author>
    <name><![CDATA[Matt Campbell]]></name>
    <email><![CDATA[mecampbell25@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Domain Modeling Mom 'n Pop Merchants in a Mobile Finance Platform]]></title>
    <link href="http://mattcampbell.nyc/2015/05/30/domain-modeling-mom-and-pop-merchants/"/>
    <updated>2015-05-30T11:04:19-04:00</updated>
    <id>http://mattcampbell.nyc/2015/05/30/domain-modeling-mom-and-pop-merchants</id>
    <content type="html"><![CDATA[<p>In my primary work project currently, I&rsquo;m working with a small startup to build a mobile finance platform for the developing world.</p>

<p>The reason: people in the developing world are largely unbanked. Estimates vary, but around <a href="http://siteresources.worldbank.org/EXTGLOBALFIN/Resources/8519638-1332259343991/world_bank3_Poster.pdf">59% of adults in developing economies don&rsquo;t have an account at a financial institution.</a> That said, using modern technologies (read: <em>really</em> cheap mobile phones, Bitcoin, and the web) it should be possible to bring banking-like services to the 2.5 billion people that use cash day-to-day almost exclusively.</p>

<h2>Where the idea of Merchants comes in to play</h2>

<p>In order to get our targeted users off cash, and onto a mobile finance platform, we need merchants in the developing world to be ready to accept payment via this mobile finance platform (which I&rsquo;ll henceforth refer to as &ldquo;MobiCommerce&rdquo; for short).</p>

<p>In many ways, &lsquo;merchants&rsquo; in our domain will be similar to everyday &lsquo;users&rsquo;, in that they&rsquo;ll be sending and receiving funds virtually via MobiCommerce.</p>

<p>Here is the <code>User</code> resource&rsquo;s schema for staters:</p>

<pre><code class="ruby">create_table "users", force: :cascade do |t|
  t.string   "phone_number",                        null: false
  t.datetime "created_at",                          null: false
  t.datetime "updated_at",                          null: false
  t.integer  "status",                default: 0,   null: false
  t.string   "name"
  t.string   "pin"
  t.decimal  "balance",               default: 0.0, null: false
  t.string   "device_id"
  t.integer  "balance_inquiry_count"
  t.string   "locale",                              null: false
  t.integer  "referrer_id"
end
</code></pre>

<p>The main attributes of interest for a particular <code>User</code> are <code>phone_number</code>, <code>pin</code>, and <code>balance</code> (at least insofar as executing a transaction on the platform is concerned).</p>

<h3>What&rsquo;s different about a merchant?</h3>

<p>Originally, my answer to this question was something along the lines of: &ldquo;Not that much is different. I&rsquo;ll basically just need to slightly different messages in the transaction process.&rdquo; For example, we&rsquo;re planning to charge a small fee to merchants in order to accept MobiCommerce as a payment option at their shops. So we&rsquo;d need the system to identiy that a merchant is on the receiving end of a transfer/transaction, and alert them via SMS accordingly - including notifying the merchant of the fee that will be taken out.</p>

<p>To domain model this, I first reached for <a href="http://makandracards.com/makandra/16077-inherit-without-single-table-inheritance-sti-in-activerecord">inheritance</a>:</p>

<pre><code class="ruby"># app/models/user/merchant.rb
class User::Merchant &lt; User
  after_create :onboard_merchant!

  private

  def onboard_merchant!
    TELEPHONY_CLIENT.send_sms(to: self.phone, message: "Reply with your business name", from: self.device_id)
  end
end
</code></pre>

<p>However, this just felt wrong to me. Typically, subclassing an <code>ActiveRecord</code>-backed model in Rails is best for organizing a limited &amp; specific set of domain-specific behavior. The classic example is something like:</p>

<pre><code class="ruby">class SignUp &lt; User ; end
</code></pre>

<p>Now, that <code>SignUp</code> class is a great place to put things like <code>validates :password_confirmation, presence: true</code> kinda&#8217; business logic. The term for this in Ruby is <a href="http://railscasts.com/episodes/416-form-objects">&ldquo;form models&rdquo;</a>. Any domain and/or business logic that pertains uniquely to signing up a user now has a home. This class gives you a perfect place to <a href="http://samurails.com/interview/ruby-inheritance-encapsulation-polymorphism/">encapsulate</a> that behavior.</p>

<h2>The Break Point</h2>

<p>I quickly hit a point with my <code>Merchant</code> resource where I realized it had outgrown its inheritance from the <code>User</code> class. Instead of simply adding merchant-specific business logic &amp; behaviors into this class, I found myself overwriting many of the methods inherited from <code>User</code> in order to tweak the desired behavior when a merchant was involved in a transaction.</p>

<h3>A merchant is really just a user with an associated <code>Business</code>&hellip;</h3>

<p>Thanks to my good friend <a href="https://twitter.com/creeefs">Chris Lee</a>, I arrived at a much better solution to this &ldquo;where to house my <code>Merchant</code> business logic&rdquo; predicament.</p>

<p>Remember, I originally inherited from <code>User</code> because I still needed all the logic that connected two people (merchants or non-merchants alike) doing a financial transaction - either a payment to a store, or a Venmo-style peer-to-peer transfer.</p>

<p>Chris pointed out that I could instead organize my merchant-related logic into its own model, called <code>Business</code>. Now, a &ldquo;merchant&rdquo; in my system is simply:</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  # most code omitted...
  has_one :business

  def merchant?
    business.present?
  end
end
</code></pre>

<p>That is, it&rsquo;s just a user instance with an associated business. Much cleaner, much more elegant, and much more expressive. Let&rsquo;s look at some examples.</p>

<p>First, this is how I can assess the merchant-specific transaction fee within my <code>Transaction</code> class:</p>

<pre><code class="ruby">class Transaction &lt; ActiveRecord::Base
  # most code omitted...
  belongs_to :sender, class_name: User
  belongs_to :receiver, class_name: User

  before_create :assess_merchant_fee!, if: :receiver_is_merchant?

  private

  def receiver_is_merchant?
      receiver.merchant?
  end

  def assess_merchant_fee!
    # deduct the fee from the amount received by the merchant and notify them...
  end
end
</code></pre>

<p>I was so relieved that I had a home for all of my <code>Business</code>-related logic, that I felt compelled to write this blog post. I hope you&rsquo;ve enjoyed reading it :smile:</p>

<p>P.S. From what I understand, Facebook uses this same approach to managing their Business Pages.</p>
]]></content>
  </entry>
  
</feed>
