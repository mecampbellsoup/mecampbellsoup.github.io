<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron school | Technical Writings of a Cryptocurrency Evangelist]]></title>
  <link href="http://mattcampbell.nyc/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://mattcampbell.nyc/"/>
  <updated>2015-07-29T15:41:41-04:00</updated>
  <id>http://mattcampbell.nyc/</id>
  <author>
    <name><![CDATA[Matt Campbell]]></name>
    <email><![CDATA[mecampbell25@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[what exactly is between those pipes?]]></title>
    <link href="http://mattcampbell.nyc/2013/10/11/what-exactly-is-between-those-pipes/"/>
    <updated>2013-10-11T22:43:00-04:00</updated>
    <id>http://mattcampbell.nyc/2013/10/11/what-exactly-is-between-those-pipes</id>
    <content type="html"><![CDATA[<h3><strong>&ldquo;I&rsquo;ve seen these pipe things before… a bunch of times.&rdquo; (The thought you just had.)</strong></h3>

<p>They look super familiar. Why does Ruby make use of them? What&rsquo;s inside the pipes?!</p>

<p>Well in short, Ruby reads the thing between the pipes as a local variable to be used in the subsequent block. Let&rsquo;s look at an example of an iterator (followed by a block) from the Ruby docs.</p>

<pre><code class="ruby">@names.each do |name|
  puts "Hello #{name}!" 
end
</code></pre>

<p>To paraphrase the docs: <code>each</code> is a method that accepts a block of code then runs that block of code for every element in a list, and the bit between <code>do</code> and <code>end</code> is just such a block. <em>The thing between pipe characters is the parameter for this block.</em></p>

<p>What happens here is that for every entry in a list (i.e. <code>@names</code> in this example), <code>name</code> is bound to that list element, and then the expression <code>puts "Hello #{name}!"</code> is run with that <code>name</code>.</p>

<p>(Thought tangent: So this example actually points to another cool feature of Ruby - &ldquo;duck typing&rdquo;. When we see <code>@names.each</code>, we naturally expect <code>@names</code> to be an Array (or Hash) and we&rsquo;ll be iterating over each element. But not so fast! What happens if <code>@names</code> is actually something totally different - like, say, an object from a custom-built class called Names? Warning: this is a highly contrived exmaple…)</p>

<pre><code class="ruby">class Name
  attr_accessor :string
  def initialize(string)
    @string = string
  end
  def each
    self.string
  end
end

@names = Name.new("woe, this is weird - I'm a psuedo string attr within a Name object which responds to #each?!")
@names.each do |name|
  puts "Hello #{name}"
end
=&gt; "woe, this is weird - I'm a psuedo string within a Name object that responds to #each?!"
</code></pre>

<p>(Um, pretty awesome, right? Ruby doesn&rsquo;t care about what you expect it to do; it only cares it the object at hand responds to the method being called. Talk about an egalitarian language!)</p>

<p>Now that we&rsquo;ve had an intro-<em>duck</em>-tion to blocks and pipes, here&rsquo;s a question - how would you <em>define</em> the thing between the &ldquo;pipes&rdquo; (these guys: <code>||</code> ) in the following code example:</p>

<pre><code class="ruby">wrecking_ball = Song.new
wrecking_ball.tap { |song| song.name = "Wrecking Ball" }
</code></pre>

<p>(Another mental tangent: I think pretty much every object responds to <code>#tap</code> - that will have to be for another blog post though.)</p>

<p>To put the question differently, what&rsquo;s the <code>|song|</code>? No, seriously - what is it?! Multiple choice:</p>

<ul>
<li> (a) method</li>
<li> (b) keyword</li>
<li> (c) variable</li> 
</ul>


<p>If you guessed C then you were spot on - pat yourself on the back! To be more specific, that thing between the pipes that we see in almost every block is actually a <em>local</em> variable. This is Ruby&rsquo;s approach to getting the object receiving the method call (e.g. the <code>wrecking_ball</code> Song object receiving the <code>tap</code> method) inside the method as an argument. The convo with Ruby (since we all have dialogues with our computers in the language of Ruby these days) goes down something like this:</p>

<blockquote>
&#8220;Ok lord programmer, I realize you&#8217;re calling a method on this object - and you&#8217;re hoping to &#8220;`yield&#8220;` the object receiving the method call to the method&#8217;s block (the code following the &#8220;`.each do &#8220;` bit). Tell ya&#8217; what: in order to make sure said object gets from the left side of this expression into the yielded block, I&#8217;m going to temporarily make a local variable - you can even name it WHATEVER YOU WANT - so that you have full access to the object within the block. Sound good? You bet your ass it does. I&#8217;m Ruby, we&#8217;re gonna&#8217; get along famously.&#8221;
</blockquote>


<h3>Putting down the pipe (only temorarily, calm down)</h3>

<p>Awesome. Now we know exactly what&rsquo;s going on between those pipes. Ruby is creating a local variable that points to the object receiving the method call, all so that we can fully access our object inside the method&rsquo;s block. Thanks Ruby.</p>

<p>To drive this point home, let&rsquo;s remove these pipe thingies and see if we can still code like we normally do.</p>

<pre><code class="ruby">some_numbers = [5,6,7,8]
some_numbers.collect do
  puts "This is our block!"
end

"This is our block!"
"This is our block!"
"This is our block!"
"This is our block!"
=&gt; [nil,nil,nil,nil]
</code></pre>

<p>OK, so that&rsquo;s pretty interesting. It looks like our block is definitely being evaluated, and our collect iterator is yielding to that block precisely <code>self.size</code> times (or 4 in this case). Since we have a <code>puts</code> method, whose return value is always <code>nil</code>, we end up with the returned array of <code>nil</code>&rsquo;s above. But I want access to the <code>[5,6,7,8]</code> on which we&rsquo;re calling <code>.collect</code>! Let&rsquo;s try another strategy:</p>

<pre><code class="ruby">some_numbers.collect do
  p some_numbers
end
[5, 6, 7, 8]
[5, 6, 7, 8]
[5, 6, 7, 8]
[5, 6, 7, 8]
 =&gt; [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]
</code></pre>

<p>Alright, getting closer. Looks like we still have access to the entire object receiving the <code>.collect</code> method call. How can we get to one element of <code>some_numbers</code> at a time though? In other words, how can we get specific, granular access to each component of the object at hand, the one receiving the method call? How can we have our block be evaluated on each element of <code>some_numbers</code>, but only one element at a time? The answer lies in Ruby&rsquo;s implementation of Array#each (and really all the iterators) - here are implementations we&rsquo;ve written <a href="https://twitter.com/FlatironSchool"/>@flatironschool</a>:</p>

<pre><code class="ruby">class Array
  def each
    i = 0
    while i &lt; self.length
      yield(self[i])
      i += 1
    end
    self
  end
  def my_each_with_index
    i = 0
    while i &lt; self.length
      yield(self[i], i)
      i += 1
    end
    self
  end
end
some_numbers = [5,6,7,8]
some_numbers.my_each_with_index do |x, i|
    puts "At index #{i} the value is #{x}"
end
At index 0 the value is 5
At index 1 the value is 6
At index 2 the value is 7
At index 3 the value is 8
=&gt; [5, 6, 7, 8]
</code></pre>

<p>Lines 5 and 13, there&rsquo;s our old pal <code>yield</code>. How cool it is to finally see the distinction between <code>.each</code> and <code>.each_with_index</code> - it&rsquo;s merely the # of local variables from <code>self</code> (the object, in our case the <code>Array [5,6,7,8]</code> receiving the method call) that we &ldquo;yield&rdquo; or pass along to the block! Now, finally, we having a working definition of what&rsquo;s betweeen the pipes: they demarcate <strong>local variables which represent each element of <code>self</code> that get passed to the block each time our method call <code>yield</code>s to the block</strong>!</p>

<p>In my next post, I want to talk about Ruby&rsquo;s bindings - a poorly understood (and rarely needed) aspect of Ruby that I hope to shed some light on.</p>

<p>Until then: #workhard, #benice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a short &amp; sweet intro to objects in ruby]]></title>
    <link href="http://mattcampbell.nyc/2013/10/08/a-short-and-sweet-intro-to-objects-in-ruby/"/>
    <updated>2013-10-08T08:25:00-04:00</updated>
    <id>http://mattcampbell.nyc/2013/10/08/a-short-and-sweet-intro-to-objects-in-ruby</id>
    <content type="html"><![CDATA[<p>Recently here at Flatiron we&rsquo;ve begun to write our code with a focus on object orientation. To a beginner, this sentence has absolutely zero meaning whatsoever - so let&rsquo;s take a step back and define some terms.</p>

<p>First of all, there are a couple truisms to keep in mind when it comes to code:</p>

<ul>
<li>First, in case you haven&#8217;t heard yet, things are going to change. Your application will grow in users; new technologies will emerge; your investors will want you to add new features (talk about a first world problem!). Your code base needs to be flexible when it comes to making changes for any of these reasons - flexible like a reed in the wind, as opposed to brittle like, say, graphite. As Sandi Metz puts it: 
<blockquote><em>
Changing requirements are the programming equivalent of friction and gravity.
</em></blockquote>
</li></ul>


<p><br>
Ok, great! So we know change is a-comin&#8217;. How do we structure our code to be prepared like the Boy Scouts?</p>

<ul>
<li>The less the different segments of your code base know about one another, the better! Admittedly, this one is a bit counterintuitive. In life, we&#8217;re typically used to setting all of our ducks in a row before taking any major steps or jumping off any cliffs (figuratively speaking, for the most part). We&#8217;re naturally pretty risk averse, and we routinely succumb to the delusion that we can mitigate risk and uncertainty a bit by lining up said ducks. It&#8217;s as if we&#8217;re trying to tear the mask of the unknown off so that we can make decisions today with perfect information. Programmers have adopted a different approach: instead of trying to know and discount the future, they simply design programs that will adapt easily, fullstop. Note I&#8217;ve made no assumption about what changes will emerge to throw our programs for a loop; the emphasis is on a coding paradigm in which your different segments can easily change how they communicate with one another. This is what people mean when they talk about the principle of object-oriented design. Once again, let&#8217;s get Sandi&#8217;s take:
<blockquote><em>
In the absence of design, unmanaged dependencies wreak havoc because objects know too muchabout one another. Changing one object forces change upon its collaborators, whichin turn, forces change upon its collaborators, ad infinitum.
</em></blockquote>
</li></ul>


<p>Now let&rsquo;s take a look at some code. Let&rsquo;s try to build a bicycle in Ruby - first we&rsquo;ll eschew the object-oriented princples just discussed, and then we&rsquo;ll embrace them. Hopefully the proof is in the pudding!</p>

<p>First, the painful, hard-to-read &amp; -follow version…</p>

<script src="https://gist.github.com/mecampbellsoup/6900628.js"></script>


<p>Whew, that was pretty exhausting and hard to follow. Let&rsquo;s see what happens if we segregate along natural, real-world dividing lines…</p>

<script src="https://gist.github.com/mecampbellsoup/6900643.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scope in ruby is like a cell membrane]]></title>
    <link href="http://mattcampbell.nyc/2013/10/01/scope-in-ruby-is-like-a-cell-membrane/"/>
    <updated>2013-10-01T00:03:00-04:00</updated>
    <id>http://mattcampbell.nyc/2013/10/01/scope-in-ruby-is-like-a-cell-membrane</id>
    <content type="html"><![CDATA[<h3>How is program scope like a cell membrane?</h3>

<p>Scope is the context within which something is defined. Let&rsquo;s focus on methods, for starters. If you write a page of code with a method in it, alongside a bunch of other stuff (variable declarations, enumerators/iterators not contained in that method, etc.), don&rsquo;t expect your method to have any clue what&rsquo;s going on above or below it in that page. Sorry, that explanation sucked - let me show an example:</p>

<pre><code>some_numbers = [1,2,3,4,5]
another_variable = {:cell_membrane =&gt; "cytosol", :receptor =&gt; "ligand"}
more_variables = some_numbers.collect do |num|
    num * 2
end

def method_in_same_code_file(args)
    more_variables + some_numbers ##=&gt; This method doesn't know what these are!! 
end
</code></pre>

<p>The way that we get around this issue of restrictive method scope in Ruby&rsquo;s design is actually something we all are quite familiar with: <em>passing arguments to our methods.</em> Perhaps you can imagine now the similarity to a cell membrane - take a look at the image below. I would sa the receptor-ligand binding is a lot like doing something like this:</p>

<pre><code>&lt;page of code omitted… let's just call the method&gt;
method_in_same_code_file(some_numbers, more_variables)
</code></pre>

<p>In this method call, our arguments works just like our receptor-ligand binding! Put differently: the arguments function as the cell membrane&rsquo;s receptors, in that only by going through them can stuff on the outside be itelligible/readable to the method&rsquo;s insides.</p>

<p>Method scope visualization!</p>

<p><img src="http://fwcdscience.wikispaces.com/file/view/transduction.gif/43381569/transduction.gif"></p>

<h3>cool things <a href="http://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a> has said (about programming):</h3>

<p>One line methods are there to communicate.</p>

<p>You don&rsquo;t spend three or four lines expressing iteration, you spend one word.</p>

<p>YAGNI: You aren&rsquo;t going to need it.</p>

<p>Optimism is an occupational hazard of programming; feedback is the treatment.</p>

<p>(Speaking about his Chrysler experience…) By far the dominant reason for not releasing sooner was a reluctance to trade the dream of success for the reality of feedback.</p>

<p><strong>Make it work, make it right, make it fast.</strong></p>

<h3>how to write a basic test/spec:</h3>

<pre><code>def assert_equal(actual, expected)
    unless actual == expected
        puts "fail: expected #{expected} but got #{actual}"
    end
end
</code></pre>

<p>Not so bad, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[under the hood of ruby's interpreter: a straightforward example]]></title>
    <link href="http://mattcampbell.nyc/2013/09/29/under-the-hood-of-rubys-interpreter-a-straightforward-example/"/>
    <updated>2013-09-29T16:49:00-04:00</updated>
    <id>http://mattcampbell.nyc/2013/09/29/under-the-hood-of-rubys-interpreter-a-straightforward-example</id>
    <content type="html"><![CDATA[<p>Flatiron, Day 4:</p>

<p>First, some things Avi said today:</p>

<blockquote>

Iteration is about going over a collection of objects. Enumeration is the same thing but you’re given the objects.<br/>

object.method… the dot is called dot notation. It’s how we send messages to objects.<br/>

.. (read: ‘dot dot’) is a literal constructor for Range.<br/>

You need to keep “rf -rf /” handy. You know, in case of those Terminator situations.<br/>

Comptuer languages fall into 2 categories: those designed for human problems, and those designed for computer problems. JavaScript was designed to be read quickly by web browsers (i.e. a computer problem).<br/>

Computers will get faster, but people won’t get any smarter.
</blockquote>


<p>Now, on to the post subject&hellip; let&rsquo;s walk stepwise through a (very) simple program in Ruby:</p>

<p>Step 0:</p>

<pre><code>x = 1
if x == 1
    puts "x is equal to 1!"
end
</code></pre>

<p>Step 1:</p>

<pre><code>if 1 == 1
    puts "x is equal to 1!"
end
</code></pre>

<p>Step 2:</p>

<pre><code>if true
    puts "x is equal to 1!"
end
</code></pre>

<p>Step 3:</p>

<pre><code>puts "x is equal to 1!"  #=&gt; "x is equal to 1!"
</code></pre>

<p>FizzBuzz ultimate solution:</p>

<pre><code>def fizzbuzz (i)
    [("fizz" if i % 3 == 0), ("buzz" if i % 5 == 0)].join
end
</code></pre>

<p>case vs. if</p>

<pre><code>if x == 1
    puts "x wins"
elsif o == 1
    puts "o wins"
end
</code></pre>

<p>case object  # only can check if condition applies to one object</p>

<p>when condition # condition cannot be a logical operand; must use if/end if you want a unique logic applied for each &ldquo;case&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[an argument (diatribe?) for embracing discomfort]]></title>
    <link href="http://mattcampbell.nyc/2013/09/29/an-argument-diatribe-for-embracing-discomfort/"/>
    <updated>2013-09-29T16:49:00-04:00</updated>
    <id>http://mattcampbell.nyc/2013/09/29/an-argument-diatribe-for-embracing-discomfort</id>
    <content type="html"><![CDATA[<p>Simply put, the last 48 hours have been a whirlwind. On Monday, the 4th semeseter of Flatiron School kicked off with me riding shotgun. Today I turned my computer into a fully-customized, command-line-driven learning (and coding) machine over the course of about 12 hours. We’ve basically become proficient in using Git/GitHub as well – no small feat for those who recall trying to quickly climb the surprisingly steep Git learning curve. I want to focus this blog on the amazing things I’ll be learning, for example some of the incredible BASH functionality I’ve picked up recently.</p>

<p>But before doing that, I want to share a story. The story is about a man who decided to spend 9 days in the wilderness with a small group of people, each person carrying only a pocket knife, clothing and some sleeping gear. To set the stage a bit, envision this: you’re dropped in the New Mexican mesas with no food for 7 days, no tents, and you must learn how to start fires by rubbing two sticks together (which takes a day and a half on your first try). Yea, no joke. The insane man’s inspiration for going on this trip?</p>

<p><img src="http://www.zawaj.com/wp-content/uploads/2010/03/scenic-sunrays-on-forest-stream.jpg"></p>

<ol>
<li>
<strong>Perspective.</strong> He’d never spent time outside of civilization. I believe the man had a longing to know how our ancestors used to live not even ~300 years ago.
</li>
<li>
<strong>Back to Basics.</strong> Modern life has abstracted away so much of the inner machinations of… well, everything. This is true to such an extent that most people no longer have any idea how our most important tools work - think combustion engines, computers, and the Internet, just to name a few. What about a friggin’ microwave, or CERN, or the Hubble Telescope?!
</li>
<li>
<strong>Embracing Discomfort as a Means for Learning.</strong> As a result of #2, relative to pre-modern man the flow of our lives has flipped completely on its head: we now enjoy long periods of relative tranquility (i.e. we aren’t freezing, starving, or in imminent danger) only very briefly interrupted with moments of discomfort (e.g. our waiter wasn’t exceptionally polite & servile).
You may be wondering: So what? What’s the issue with leading a life characterized by an uninterrupted flow of pleasure and leisure? Isn’t that the goal of a well-functioning, capitalistic society?
</li>
</ol>


<p>The problem is that when all of our problems are solved for us and the solutions are abstracted away, <em>we forget how to solve our own problems.</em> Along the way, we never learn how to consistently approach problems with an open &amp; creative mindset. Hell, we even forget how to recognize a problem in the first place! (Example: many Americans stil do not have access to the Internet. Oh, add healthcare to that list of basic things everyone should have access to today.)</p>

<p>Think of every banker in New York City. Their problems consist of getting their children into the 92nd Street Y preschool; securing a bigger bonus than that other VP they work with; or choosing between the BMW X5 and the Volvo equivalent (since, ya’ know, it’s super safe and all). I don’t mean to triviliaze these people’s existence – I worked in finance for 3 years myself, whatever it’s worth. Rather, I want to point out something that I’ve been gnawing on for a long time: I think that our striving for wealth &amp; comfort (not the subsistence type, but rather the type that screams “… but I have more things than anyone else in this village!”) is utterly misplaced, and has eradicated a good chunk of our collective genius.</p>

<p>Our human legacy can take whatever form we as a species strive for it to take. Like the man who nearly starved over 9 days hiking in the wilderness, let’s try to preserve &amp; even expand our perspective regarding our place on earth. Let’s interrupt the ultimately meaningless and vapid pursuit of über-comfort that constantly distracts us from connecting with one another at a deep, real level. It’s up to each one of us to ensure the human legacy – our sacred imprimitur on the universe – is a worthy one.</p>
]]></content>
  </entry>
  
</feed>
