<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Thoughts & Technical Writings.]]></title>
  <link href="http://mattcampbell.nyc/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://mattcampbell.nyc/"/>
  <updated>2016-11-25T18:23:48-05:00</updated>
  <id>http://mattcampbell.nyc/</id>
  <author>
    <name><![CDATA[Matt Campbell]]></name>
    <email><![CDATA[mecampbell25@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Private Methods Can Save Some TDD Headache]]></title>
    <link href="http://mattcampbell.nyc/2016/02/17/private-methods-can-save-some-tdd-headache/"/>
    <updated>2016-02-17T16:18:58-05:00</updated>
    <id>http://mattcampbell.nyc/2016/02/17/private-methods-can-save-some-tdd-headache</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s face it: TDD is hard. I would argue that there&rsquo;s value in that difficulty - TDD forces you to address domain modeling decisions early on; to declare your API before implementing it. I have spent more time than I care to admit staring at some <code>*_spec.rb</code> file, unsure about how to translate the loosely-defined conception of behavior in my brain into test examples.</p>

<p>However, there&rsquo;s good <a href="news:">news:</a> relying on private methods can some (some) of this pain.</p>

<h2>A Rails Example</h2>

<p>Let&rsquo;s say your co-worker has asked you to write a webhooks microservice. This standalone API will be responsible for:</p>

<ol>
<li>Creating new callback subscriptions for users that want to subscribe</li>
<li>Sending the callback payloads to said user&rsquo;s callback(s) URL(s)</li>
</ol>


<blockquote><p>&lsquo;A crucial part of any callbacks API is delivering, over the web via HTTP POST, the actual callback payload,&rsquo; you reason aloud.</p></blockquote>

<p>To that end, you conjure up a vision of some <code>DeliverCallbackJob</code> class that needs only a <code>User</code> instance and the callback payload (probably a long string of JSON, like a serialized web response). Following a common pattern, you decide the interface for this class will be limited to one method:</p>

<pre><code class="ruby">DeliverCallbackJob#perform!
</code></pre>

<p>In adherence to TDD, we may start with an example (RSpec DSL here) that looks like this:</p>

<pre><code class="ruby">RSpec.describe DeliverCallbackJob do
  # NOTE: some/much setup code omitted...

  let(:deliverer) { DeliverCallbackJob.new(user, payload) }

  describe "#perform!" do
    subject { deliverer.perform! }

    it "sends a callback to all of the user's associated Callback#callback_url endpoints" do
      expect(Net::HTTP).to receive(:post).exactly(user.callbacks.size).times
      subject
    end
  end
end
</code></pre>

<p>Now, <code>User#callbacks</code> is a standard <code>ActiveRecord::Associations::ClassMethods#has_many</code> association. So we may be tempted to now drop into our class definition and start implementing:</p>

<pre><code class="ruby">#NOTE: This is pseudo code! Read between the lines somewhat please :)

class DeliverCallbackJob
  def perform!
    user.callbacks.each do |callback|
      Net::HTTP.post(callback.callback_url)
    end
  end
end
</code></pre>

<h2>The Problem</h2>

<p>This works, yes - but we&rsquo;ve unwittingly coupled logic unrelated to delivering a callback to this class. Specifically (and this can be hard to see in Rails a lot of the times), the usage of <code>user.callbacks</code> is the point of coupling. <code>DeliverCallbackJob</code> does not and should not care how we get a (possibly empty) list of callbacks from our <code>user</code> record.</p>

<h2>Re-writing our Test</h2>

<p>A better test example - one that would have exposed this tendency to couple to the ActiveRecord API - might read like this:</p>

<pre><code class="ruby">describe "#perform!" do
  subject { deliverer.perform! }

  let(:size)      { 4 }
  let(:callback)  { double(callback_url: "foo.bar.com/callback") }
  let(:callbacks) { Array.new(size, callback) }

  before { expect(deliverer).to receive(:callbacks).and_return(callbacks) }

  it "sends a callback to all of the user's associated Callback#callback_url endpoints" do
    expect(Net::HTTP).to receive(:post).with("foo.bar.com/callback").exactly(size).times
    subject
  end
end
</code></pre>

<p>The key difference here is the assertion we&rsquo;ve added to the <code>before</code> hook:</p>

<pre><code class="ruby">before { expect(deliverer).to receive(:callbacks).and_return(callbacks) }
</code></pre>

<p>We&rsquo;ve implicitly augmented the interface of <code>DeliverCallbackJob</code> by a method <code>#callbacks</code>.</p>

<p>This is a really good thing! Now, we have a place to put the logic of &ldquo;gather all the <code>Callback</code> records against which I need to deliver the callback payload at hand&rdquo;. And as such, we have a new point at which we can introduce stubs or mocks in our tests.</p>

<p>In order to get this spec passing, we might refactor our class like so:</p>

<pre><code class="ruby">class DeliverCallbackJob
  def perform!
    callbacks.each do |callback|
      Net::HTTP.post(callback.callback_url)
    end
  end

  private

  def callbacks
    # This is now an implementation detail, as opposed to a closely coupled
    # and hidden dependency stowed away within the `perform!` method.

    # For now, we're using ActiveRecord so implementation may be unchaged
    # relative to our first version of this class... but if we drop Rails/AR
    # in the future, we have a clearly documented spot to change this logic.

    user.callbacks
  end
end
</code></pre>

<h2>Recap</h2>

<p>So what did we learn today? When you&rsquo;re struggling to get through your TDD, it tends to indicate hidden coupling and dependencies. When you feel this happening, take a closer look at your implementation and see what can be moved into private methods. Then, in your test examples, make those dependencies explicit so that you can mock, stub, or whatever suits you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[running simple Test::Unit specs in sublime]]></title>
    <link href="http://mattcampbell.nyc/2013/11/16/running-terse-test-unit-specs-in-sublime/"/>
    <updated>2013-11-16T11:08:00-05:00</updated>
    <id>http://mattcampbell.nyc/2013/11/16/running-terse-test-unit-specs-in-sublime</id>
    <content type="html"><![CDATA[<h1>Setting the Stage: Codewars</h1>

<p><a href="www.codewars.com/r/LqvZzw">Codewars</a> is this awesome site where you can learn Ruby or JS by training on &ldquo;katas&rdquo; and climbing the ranks of code warriors on the site. The more elegant and efficient your solution to increasingly difficult challenges, the more honor you incur.</p>

<p>I&rsquo;ve been working through a few on the Ruby side of things, and interestingly enough the Codewars team has built in to the platform <a href="http://www.codewars.com/docs/kata-test-framework">their own testing DSL</a>. It&rsquo;s sort of a mut: they&rsquo;ve borrowed all the best elements of Ruby&rsquo;s most popular frameworks, including RSpec, T::U and MiniTest. The result: for every langauga kata set on Codewars, there is a Test class/prototype (I say prototype because of JavaScript&rsquo;s unique twist on object-orientation and inheritance). Users can then easily design their own tests as instances of this parent class by invoking very natural-sounding methods like &lsquo;expect&rsquo; (from RSpec), &lsquo;assert_equal&rsquo; (from T::U), and so on.</p>

<h2>the path to enlightenment was winding</h2>

<p>Now while that sounds straightforward enough, I must confess it took me a solid couple of hours to realize that Codewars was not using a native Ruby test framework, but rather was utilizing their own testing API (and not just using some built-in T::U syntactic sugar or something):</p>

<pre><code class="ruby"># Create your own tests here. These are some of the methods available:
#  Test.expect(boolean, [optional] message) 
#  Test.assert_equals(actual, expected, [optional] message)
#  Test.assert_not_equals(actual, expected, [optional] message) 
</code></pre>

<p><a href="http://www.codewars.com/docs/ruby-test-reference">Here&rsquo;s the docs for the Ruby Test methods</a> that are provided by Codewars&#8217; API. Pretty fancy, huh?</p>

<h2>simpler route: use RSpec, even for miniscule test suites</h2>

<p>While I appreciate the work the Codewars guys have done on this Test module, I don&rsquo;t think learning yet another testing DSL (even though it&rsquo;s only slightly different from RSpec) makes any sense. I&rsquo;m actually a little confused as to why they would implement their own test framework in lieu of one of the already-accepted and ubiquitous frameworks like RSpec.</p>

<p>I prefer to do as close to 100% of my code-writing in Sublime as possible (practice makes perfect, ya&#8217; know?)</p>
]]></content>
  </entry>
  
</feed>
